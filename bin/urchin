#!/usr/bin/ruby
# Copyright (c) 2010 Mark Somerville <mark@scottishclimbs.com>
# Released under the GNU General Public License (GPL) version 3.
# See COPYING.

begin
  if ARGV.empty?
    $0 = "urchin"
  else
    $0 = "urchin #{ARGV.join(" ")}"
  end

  $LOAD_PATH.delete "."

  # Handle a symlinked bin/urchin
  bin_urchin_path = if File.symlink?(__FILE__)
    File.readlink(__FILE__)
  else
    __FILE__
  end
  require "#{File.dirname(bin_urchin_path)}/../boot"

  options = {}
  OptionParser.new do |opts|
    opts.banner = "Usage: urchin [options]"

    opts.on("-c", "--commands [COMMANDS]", "Run this command string") do |command_string|
      options[:command_string] = command_string
    end

    opts.on("-l", "--login", "Make this shell a login shell, for compatibility. Does nothing.") do
      # Currently does nothing. For compatibility.
    end

    opts.on("-h", "--help", "Show this message") do
      puts opts
      exit 0
    end

    opts.on("--version", "Show version") do
      puts Urchin::VERSION
      exit 0
    end
  end.parse!

  # Allow piping commands in.
  if STDIN.stat.pipe?
    options[:command_string] = STDIN.read
  end

  @shell = Urchin::Shell.new

  # Run any user defined configuration stuff.
  if File.exists?(Urchin::URCHIN_RB) && File.readable?(Urchin::URCHIN_RB)
    begin
      eval File.read(Urchin::URCHIN_RB)
    rescue Exception => exception
      STDERR.puts "Exception in #{Urchin::URCHIN_RB}:"
      STDERR.puts exception.message
      STDERR.puts exception.backtrace.join("\n")
      STDERR.puts
    end
  end

  if options[:command_string]
    @shell.parse_and_run options[:command_string]
  else
    Readline.completion_proc = Urchin::Completer.new(ENV["PATH"], @shell).completion_proc
    @shell.run
  end

rescue Exception => exception
  if exception.class == SystemExit
    exit exception.status
  end
  if @shell
    @shell.history.cleanup
  end
  puts "Urchin exited.\n\n"
  STDERR.puts "  #{exception.class}: #{exception.message}"
  STDERR.puts "  "+exception.backtrace.join("\n  ")
  gets
end
